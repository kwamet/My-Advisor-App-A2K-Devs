{
	"info": {
		"_postman_id": "e1db428a-a51d-4300-bc51-734f5518a976",
		"name": "My Advisor App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24339608",
		"_collection_link": "https://www.postman.com/spaceflight-geoscientist-54596538/workspace/uwi/collection/30771748-e1db428a-a51d-4300-bc51-734f5518a976?action=share&source=collection_link&creator=24339608"
	},
	"item": [
		{
			"name": "Create Student",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"student_id\": 658,\n    \"password\": \"specs\",\n    \"name\": \"Erenn\",\n    \"programname\": \"Computer Science Major\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/student",
					"host": [
						"{{host}}"
					],
					"path": [
						"student"
					]
				},
				"description": "\n### Add Student\nThis endpoint allows you to add a new student.\n\n#### Request Body\n- `student_id` (number) - The ID of the student.\n- `password` (string) - The password of the student.\n- `name` (string) - The name of the student.\n- `programname` (string) - The program name of the student.\n\n#### Response\n- Status: 400\n- `Error` (string) - Details about the error, if any.\n"
			},
			"response": []
		},
		{
			"name": "Student Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'token'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Token is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.match(/[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+/, \"Token format is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "password",
							"value": "specs",
							"type": "text"
						},
						{
							"key": "username",
							"value": "658",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"login"
					]
				},
				"description": "This endpoint allows the user to log in by sending a POST request to the specified URL. The request should include a form-data body with the \"username\" and \"password\" parameters. The \"username\" and \"password\" parameters should be of type text.\n\nUpon successful execution, the endpoint returns a status code of 200 along with a JSON response containing a \"token\" for the authenticated user."
			},
			"response": []
		},
		{
			"name": "Add Course to History",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'Success!'\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('Success!');",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Success field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData[\"Success!\"]).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "specs",
							"type": "string"
						},
						{
							"key": "username",
							"value": "658",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"student_id\": 658,\n    \"course_code\": \"COMP1600\",\n    \"score\":42\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/student/add_course",
					"host": [
						"{{host}}"
					],
					"path": [
						"student",
						"add_course"
					]
				},
				"description": "This endpoint allows you to add a course for a student. The HTTP POST request should be made to `{{host}}/student/add_course`. The request should include a JSON payload in the raw request body, with the keys `student_id`, `course_code`, and `score` to specify the student's ID, the course code, and the score respectively.\n\n### Request Body\n\n- `student_id` (number): The ID of the student for whom the course is being added.\n- `course_code` (string): The code of the course being added.\n- `score` (number): The score obtained by the student in the course.\n    \n\n### Response\n\nUpon successful execution, the response will have a status code of 200 and a JSON object with the key `Success!`, indicating that the course addition was successful."
			},
			"response": []
		},
		{
			"name": "All Student Course History ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - Success and courses\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Success).to.exist;",
							"    pm.expect(responseData.courses).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Courses array should exist and be an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.courses).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Course Code is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.courses).to.be.an('array');",
							"    ",
							"    responseData.courses.forEach(function(course) {",
							"        pm.expect(course).to.have.property('Course Code').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Score is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.courses).to.be.an('array');",
							"    responseData.courses.forEach(function(course) {",
							"        pm.expect(course.Score).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "specs",
							"type": "string"
						},
						{
							"key": "username",
							"value": "658",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/student/all_course_history?student_id=658",
					"host": [
						"{{host}}"
					],
					"path": [
						"student",
						"all_course_history"
					],
					"query": [
						{
							"key": "student_id",
							"value": "658"
						}
					]
				},
				"description": "This endpoint retrieves the course history for a specific student identified by their ID. The HTTP GET request should be made to {{host}}/student/all_course_history with the student_id query parameter set to the desired student's ID.\n\nThe response to the request will have a status code of 200, indicating a successful operation. The body of the response will include a \"Success!\" message along with an array of courses. Each course in the array will have a Course Code, Program ID, and Score associated with it."
			},
			"response": []
		},
		{
			"name": "Create Course Plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Error message is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.Error).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Error message should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.Error).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Error message structure is as expected\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Error).to.exist.and.to.be.a('string');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"student_id\": \"658\",\n    \"semester\": 1,\n    \"year\": 2021\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/student/create_student_plan",
					"host": [
						"{{host}}"
					],
					"path": [
						"student",
						"create_student_plan"
					]
				},
				"description": "This endpoint allows you to create a study plan for a student. The request should be sent as an HTTP POST to {{host}}/student/create_student_plan. The request body should be in raw format and include the student's ID, semester, and year.\n\n### Request Body\n\n- `student_id` (string): The ID of the student for whom the study plan is being created.\n- `semester` (number): The semester for which the study plan is being created.\n- `year` (number): The year for which the study plan is being created.\n    \n\n### Response\n\nThe endpoint returns a status code of 400 along with an error message in the response body.\n\nExample:\n\n``` json\n{\n    \"Error\": \"Sample error message\"\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Add Course to Plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has a valid JSON content type\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'student_plan' object is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.include.keys('student_plan');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"student_id\": \"658\",\n    \"command\": \"FOUN1101\",\n    \"semester\": 1,\n    \"year\": 2021\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/student/populate_student_plan",
					"host": [
						"{{host}}"
					],
					"path": [
						"student",
						"populate_student_plan"
					]
				},
				"description": "\nThis endpoint allows you to populate a student's plan by making an HTTP POST request to {{host}}/student/populate_student_plan.\n\n### Request Body\n- `student_id` (string) - The ID of the student.\n- `command` (string) - The command for populating the plan.\n- `semester` (number) - The semester for which the plan is to be populated.\n- `year` (number) - The year for which the plan is to be populated.\n\n### Response\nUpon a successful execution, the API returns a status code of 200.\n\n"
			},
			"response": []
		},
		{
			"name": "Get Course Plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response contains 'Success!' message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('Success!').that.is.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Each course object in the 'courses' array contains required properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.courses).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.courses.forEach(function(course) {",
							"        pm.expect(course).to.include.all.keys('code', 'credits', 'name', 'prereqs', 'rating', 'semester', 'year');",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/student/get_student_plan?student_id=658&semester=1&year=2021",
					"host": [
						"{{host}}"
					],
					"path": [
						"student",
						"get_student_plan"
					],
					"query": [
						{
							"key": "student_id",
							"value": "658"
						},
						{
							"key": "semester",
							"value": "1"
						},
						{
							"key": "year",
							"value": "2021"
						}
					]
				},
				"description": "This endpoint retrieves the study plan for a specific student based on the provided student ID, semester, and year.\n\n### Request\n\n#### Query Parameters\n\n- `student_id` (integer) - The ID of the student for whom the study plan is to be retrieved.\n- `semester` (integer) - The semester for which the study plan is to be retrieved.\n- `year` (integer) - The year for which the study plan is to be retrieved.\n    \n\n### Response\n\n#### Success 200 OK\n\nThe successful response will include an array of courses with the following details:\n\n- `code` (string) - The code of the course.\n- `credits` (integer) - The credits associated with the course.\n- `name` (string) - The name of the course.\n- `prereqs` (array of strings) - The prerequisites for the course.\n- `rating` (integer) - The rating of the course.\n- `semester` (integer) - The semester for which the course is offered.\n- `year` (integer) - The year for which the course is offered.\n    \n\nExample:\n\n``` json\n{\n  \"Success!\": \"\",\n  \"courses\": [\n    {\n      \"code\": \"\",\n      \"credits\": 0,\n      \"name\": \"\",\n      \"prereqs\": [\"\"],\n      \"rating\": 0,\n      \"semester\": 0,\n      \"year\": 0\n    }\n  ]\n}\n\n ```"
			},
			"response": []
		}
	]
}